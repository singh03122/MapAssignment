Q1 . What is a Map in Java ?

Ans :- In Java , a map refers to a data structure that store key-values pairs where each key is unique . It's part of the Java       Collection Framework and is represented by the Map interface . 

Some common implementations of the Map interface in Java include :

HASHMAP:-  It uses a has table to store the key-values pairs . It provides constant-time performance for the basic operations like get() and put() , assuming the has function disperses the elements properly among the buckets . 

TREEMAP :- It stores the key-values pairs in a sorted tree structure , It maintains the keys in sorted order , which allow for efficient restrieval operations but has slower performance comparted to HasMap .

LinkedHasMap :- It maintains the insertion order of the keys , which means when interating over the map , the elements are returned in the order they were inserted . It's similar to HashMap , but with additional linked list to maintain the order . 

Q2.  What are the commonly used implementations of Map in java ?
Ans :- These are some of the most commonly used implementations of the Map interface in Java:

HashMap: This is one of the most commonly used implementations of the Map interface. It stores key-value pairs in a hash table, offering constant-time performance for basic operations like get() and put() on average. It does not guarantee the order of the elements.

TreeMap: TreeMap stores key-value pairs in a sorted tree-based data structure. It maintains the keys in sorted order, providing efficient retrieval of elements based on their natural order or a custom comparator. However, it has slower performance compared to HashMap for basic operations due to the overhead of maintaining the sorted structure.

LinkedHashMap: LinkedHashMap maintains the insertion order of the keys, meaning when iterating over the map, the elements are returned in the order they were inserted. It achieves this by maintaining a doubly-linked list alongside the hash table. LinkedHashMap provides predictable iteration order, which can be useful in scenarios requiring ordered traversal.

ConcurrentHashMap: ConcurrentHashMap is designed for concurrent use, making it suitable for multithreaded applications. It achieves thread-safety by partitioning the map into segments, allowing multiple threads to operate on different segments concurrently without blocking each other. ConcurrentHashMap provides better scalability and performance in concurrent environments compared to synchronized HashMap.

EnumMap: EnumMap is a specialized implementation of the Map interface designed to be used with enum keys. It is highly efficient and provides type safety, as it can only accept keys of a specific enum type. EnumMap is particularly useful when dealing with a small fixed set of enum keys.

WeakHashMap: WeakHashMap is an implementation of the Map interface where keys are weakly referenced. It is typically used in scenarios where the lifetime of keys is determined by external factors, such as caching, and allows keys to be garbage collected when no longer in use.

Q3. What are the difference between HashMap and TreeMap ?
Ans:- HashMap and TreeMap are both implementations of the Java Map interface, but they have several differences in terms of performance, ordering, and internal data structures:

Internal Data Structure:

HashMap: It uses a hash table to store key-value pairs. The keys are hashed, and the corresponding values are stored at the hashed index. It offers constant-time performance (O(1)) for basic operations like get() and put().

TreeMap: It uses a Red-Black Tree to store key-value pairs. The keys are stored in sorted order within the tree. As a result, TreeMap maintains the keys in sorted order, which allows for efficient retrieval operations but has a higher time complexity compared to HashMap for basic operations (O(log n)).


Ordering:

HashMap: It does not guarantee any specific order of the keys. The order in which the keys are stored in the HashMap is not predictable and may change over time, especially when the size of the map changes or due to implementation details.

TreeMap: It maintains the keys in sorted order. When iterating over the TreeMap or accessing its entries, the keys are returned in sorted (ascending) order. This predictable ordering can be useful in scenarios where sorted traversal of keys is required.


Performance:

HashMap: Provides better performance for basic operations like get() and put() compared to TreeMap. The average time complexity for these operations in HashMap is O(1) assuming a good hash function and uniform distribution of keys.

TreeMap: Has slower performance for basic operations compared to HashMap due to the overhead of maintaining the sorted tree structure. The average time complexity for get() and put() operations in TreeMap is O(log n), where n is the number of elements in the map.

Usage:

HashMap: Suitable for scenarios where fast access to key-value pairs is required, and the order of the keys is not important. It is commonly used in applications where performance is a primary concern and the order of elements does not matter.
TreeMap: Useful when the keys need to be stored in sorted order or when operations like finding the minimum or maximum key are required. TreeMap is often used in scenarios where elements need to be sorted based on their natural order or a custom comparator.

Q4.What are Generices in java?
Ans :- Generics in Java provide a way to create classes, interfaces, and methods that operate with parameters (types) that are not specified until the classes, interfaces, or methods are actually used. They allow you to design reusable and type-safe components.

Here are some key points about generics in Java:

Type Safety: Generics provide compile-time type checking, ensuring that the code is type-safe. This helps in detecting errors at compile time rather than runtime, which can lead to more robust and reliable code.

Code Reusability: Generics enable you to write code that can work with any data type. This promotes code reusability by allowing you to write generic algorithms and data structures that can be used with different types without modification.

Avoiding Type Casting: Generics eliminate the need for explicit type casting in many situations. When you use generics, the compiler automatically inserts the necessary type casts, reducing the chance of ClassCastException at runtime.

Collections Framework: Generics are extensively used in the Java Collections Framework to create type-safe collections. For example, ArrayList<String> represents a list that can only contain strings, providing compile-time type checking.

Parameterized Types: Generics are parameterized types, meaning that you can define classes, interfaces, and methods with type parameters. These parameters can be used within the class or method to represent unknown types.


Q6. What are the benifites of Generices in java ?
Ans:- 
Generics in Java offer several benefits, which contribute to cleaner, safer, and more reusable code. Here are some of the key benefits:

Type Safety: Generics provide compile-time type checking, ensuring that the code is type-safe. This means that type mismatches are detected at compile time rather than at runtime, reducing the likelihood of runtime errors such as ClassCastException.

Code Reusability: Generics enable you to write code that can work with any data type. This promotes code reusability by allowing you to write generic algorithms and data structures that can be used with different types without modification. For example, you can create a generic list that works with integers, strings, or any other data type.

Avoidance of Type Casting: Generics eliminate the need for explicit type casting in many situations. When you use generics, the compiler automatically inserts the necessary type casts, reducing the verbosity of the code and the chance of introducing errors.

Improved Readability and Maintainability: By using generics, code becomes more readable and self-explanatory. Generics provide a way to express the intent of the code more clearly by specifying the types of objects that a class, interface, or method operates on. This improves the maintainability of the codebase as developers can easily understand the purpose and usage of generic components.

Enhanced Performance: Generics can lead to improved performance in some cases. Since generics perform type checking at compile time, they can eliminate the overhead of runtime type checks and type conversions, resulting in more efficient code execution.

Stronger Abstraction: Generics enable stronger abstraction by allowing developers to create generic classes, interfaces, and methods that operate independently of specific data types. This promotes a higher level of abstraction and encapsulation, leading to more modular and flexible designs.

Enhanced Java Collections Framework: Generics are extensively used in the Java Collections Framework to create type-safe collections. This ensures that the collections contain elements of a specific type, providing compile-time type checking and preventing runtime errors related to type mismatches.

Q7. What are the generics classes in java ?
Ans :- In Java, generic classes are classes that are parameterized by one or more type parameters. These type parameters act as placeholders for actual data types that are specified when an instance of the class is created. This allows you to create classes that can work with different data types without sacrificing type safety.

1.Generic Class with Single Type Parameter:-
                      
    public class Box<T> {
    private T value;

    public void setValue(T value) {
        this.value = value;
    }

    public T getValue() {
        return value;
    }
}

2. Generic Class with Multiple Type Parameters:-

public class Pair<K, V> {
    private K key;
    private V value;

    public Pair(K key, V value) {
        this.key = key;
        this.value = value;
    }

    public K getKey() {
        return key;
    }

    public V getValue() {
        return value;
    }
}

3.Generic Interface:-
public interface List<E> {
    void add(E element);
    E get(int index);
}

Q8.What are the type parameters in java Generices ?
Ans:-A type parameter is a placeholder for a specific data type that is supplied when using a generic class, interface, or method. Type parameters allow you to create classes, interfaces, and methods that operate on any data type without sacrificing type safety.

Here are some key points about type parameters in Java generics:

Declared Using Angle Brackets < >: Type parameters are declared using angle brackets < > following the name of the generic class, interface, or method.

Single or Multiple Type Parameters: A generic class, interface, or method can have one or more type parameters. For example, Box<T> has a single type parameter T, while Pair<K, V> has two type parameters K and V.

Type Parameter Naming Convention: By convention, type parameters are often single uppercase letters to indicate they are placeholders. Common conventions include E for elements, K for keys, V for values, T for any type, etc. However, you can use any valid Java identifier as a type parameter name.

Supplying Actual Types: When using a generic class, interface, or method, you supply actual data types (concrete types) for the type parameters. For example, when creating an instance of Box<String>, String is supplied as the actual type for the type parameter T.

Type Parameter Scope: Type parameters are scoped to the declaration of the generic class, interface, or method. They can be used within the class, interface, or method to represent the unspecified types.
   
Q9.What are the Generics Methods in java ?
Ans:- Generic methods in Java are methods that are parameterized by one or more type parameters. They allow you to create methods that can work with any data type without sacrificing type safety. Generic methods can be defined within generic classes, non-generic classes, or even as static methods.

Here are some key points about generic methods in Java:

Declared Using Angle Brackets < >: Generic methods are declared using angle brackets < > before the return type of the method.
Type Parameters: Type parameters for generic methods are declared within angle brackets < > after the method's access modifier and before its return type. These type parameters can be used to specify the types of parameters, local variables, and the return type within the method.

Type Inference: In many cases, the actual type arguments for a generic method can be inferred by the compiler based on the method arguments. This means that you don't always need to explicitly specify the type arguments when invoking a generic method.

Flexibility: Generic methods provide flexibility in creating methods that operate on any data type. They can be used to create utility methods, algorithms, and operations that are independent of specific data types.

Type Safety: Like generic classes, generic methods provide type safety by performing compile-time type checking. This ensures that type mismatches are detected at compile time rather than at runtime.

Q10.What is the difference between the ArrayList  and ArrayList<T>?
Ans:- There is no difference between ArrayList and ArrayList<T>; they refer to the same thing. Both ArrayList and ArrayList<T> represent a dynamically resizable array-based implementation of the List interface in the Java Collections Framework.

Here's a breakdown of the terms:

ArrayList: This is the raw type of the ArrayList class. In earlier versions of Java (before Java 5), generic types were not supported, so ArrayList was used without specifying a type parameter. However, using raw types is discouraged because it bypasses compile-time type checking and can lead to runtime errors.

ArrayList<T>: This is the generic type of the ArrayList class, where T is a placeholder for the type of elements that the list can hold. When you use ArrayList<T>, you're specifying the type of elements that the ArrayList can contain. For example, ArrayList<String> represents a list that can only contain strings.

In modern Java programming, it's recommended to use generic types (ArrayList<T>) over raw types (ArrayList) because generics provide compile-time type checking and help prevent errors related to type mismatches.
    
       



